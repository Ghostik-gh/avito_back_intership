// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	sql "database/sql"

	mock "github.com/stretchr/testify/mock"
)

// SegmentCreator is an autogenerated mock type for the SegmentCreator type
type SegmentCreator struct {
	mock.Mock
}

// CreateLog provides a mock function with given fields: user_id, seg_name, opertaion
func (_m *SegmentCreator) CreateLog(user_id int, seg_name string, opertaion string) error {
	ret := _m.Called(user_id, seg_name, opertaion)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, string) error); ok {
		r0 = rf(user_id, seg_name, opertaion)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSegment provides a mock function with given fields: name, amount
func (_m *SegmentCreator) CreateSegment(name string, amount string) error {
	ret := _m.Called(name, amount)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(name, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUserSegment provides a mock function with given fields: user_id, segment
func (_m *SegmentCreator) CreateUserSegment(user_id int, segment string) error {
	ret := _m.Called(user_id, segment)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(user_id, segment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserList provides a mock function with given fields:
func (_m *SegmentCreator) UserList() (*sql.Rows, error) {
	ret := _m.Called()

	var r0 *sql.Rows
	var r1 error
	if rf, ok := ret.Get(0).(func() (*sql.Rows, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *sql.Rows); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Rows)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSegmentCreator creates a new instance of SegmentCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSegmentCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *SegmentCreator {
	mock := &SegmentCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
