// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	sql "database/sql"

	mock "github.com/stretchr/testify/mock"
)

// SegmentDeleter is an autogenerated mock type for the SegmentDeleter type
type SegmentDeleter struct {
	mock.Mock
}

// CreateLog provides a mock function with given fields: user_id, seg_name, opertaion
func (_m *SegmentDeleter) CreateLog(user_id int, seg_name string, opertaion string) error {
	ret := _m.Called(user_id, seg_name, opertaion)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, string) error); ok {
		r0 = rf(user_id, seg_name, opertaion)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSegment provides a mock function with given fields: name
func (_m *SegmentDeleter) DeleteSegment(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SegmentInfo provides a mock function with given fields: segment
func (_m *SegmentDeleter) SegmentInfo(segment string) (*sql.Rows, error) {
	ret := _m.Called(segment)

	var r0 *sql.Rows
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*sql.Rows, error)); ok {
		return rf(segment)
	}
	if rf, ok := ret.Get(0).(func(string) *sql.Rows); ok {
		r0 = rf(segment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Rows)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(segment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSegmentDeleter creates a new instance of SegmentDeleter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSegmentDeleter(t interface {
	mock.TestingT
	Cleanup(func())
}) *SegmentDeleter {
	mock := &SegmentDeleter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
